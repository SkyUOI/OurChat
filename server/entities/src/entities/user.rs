//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    #[sea_orm(unique)]
    pub ocid: String,
    #[sea_orm(column_type = "Text")]
    pub passwd: String,
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub time: DateTimeWithTimeZone,
    pub resource_used: i64,
    pub friend_limit: i32,
    pub friends_num: i32,
    pub avatar: Option<String>,
    pub public_update_time: DateTimeWithTimeZone,
    pub update_time: DateTimeWithTimeZone,
    pub account_status: i32,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub public_key: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::announcement::Entity")]
    Announcement,
    #[sea_orm(has_many = "super::files::Entity")]
    Files,
    #[sea_orm(has_one = "super::manager_role_relation::Entity")]
    ManagerRoleRelation,
    #[sea_orm(has_many = "super::message_records::Entity")]
    MessageRecords,
    #[sea_orm(has_many = "super::role::Entity")]
    Role,
    #[sea_orm(has_many = "super::session_relation::Entity")]
    SessionRelation,
    #[sea_orm(has_many = "super::user_role_relation::Entity")]
    UserRoleRelation,
}

impl Related<super::announcement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Announcement.def()
    }
}

impl Related<super::files::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Files.def()
    }
}

impl Related<super::manager_role_relation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ManagerRoleRelation.def()
    }
}

impl Related<super::message_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MessageRecords.def()
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Role.def()
    }
}

impl Related<super::session_relation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SessionRelation.def()
    }
}

impl Related<super::user_role_relation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoleRelation.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        super::session_relation::Relation::Session.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::session_relation::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
