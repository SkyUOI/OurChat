//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "session")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub session_id: i64,
    pub name: String,
    pub size: i32,
    pub avatar_key: Option<String>,
    pub updated_time: DateTimeWithTimeZone,
    pub created_time: DateTimeWithTimeZone,
    pub description: String,
    pub default_role: i64,
    pub e2ee_on: bool,
    pub room_key_time: DateTimeWithTimeZone,
    pub leaving_to_process: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::friend::Entity")]
    Friend,
    #[sea_orm(has_many = "super::message_records::Entity")]
    MessageRecords,
    #[sea_orm(
        belongs_to = "super::role::Entity",
        from = "Column::DefaultRole",
        to = "super::role::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Role,
    #[sea_orm(has_many = "super::session_invitation::Entity")]
    SessionInvitation,
    #[sea_orm(has_many = "super::session_relation::Entity")]
    SessionRelation,
    #[sea_orm(has_many = "super::user_role_relation::Entity")]
    UserRoleRelation,
}

impl Related<super::friend::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Friend.def()
    }
}

impl Related<super::message_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MessageRecords.def()
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Role.def()
    }
}

impl Related<super::session_invitation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SessionInvitation.def()
    }
}

impl Related<super::session_relation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SessionRelation.def()
    }
}

impl Related<super::user_role_relation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoleRelation.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::session_relation::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::session_relation::Relation::Session.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
